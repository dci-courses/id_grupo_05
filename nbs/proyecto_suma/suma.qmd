---
title: "Suma con los dedos"
format: html
---

<div id="p5-sketch">
  <div id="canvas-container"></div>
</div>
<div id="sum-box" style="display: inline-block; vertical-align: top; margin-right: 20px; padding: 10px; border: 2px solid #000; font-size: 24px;">
  <strong>Suma aleatoria:</strong>
  <div id="random-sum" style="font-size: 36px; color: blue;"></div>
</div>
<div id="result-box" style="display: inline-block; vertical-align: top; margin-left: 20px; padding: 10px; border: 2px solid #000; font-size: 24px;">
  <strong>Suma de dedos levantados:</strong>
  <div id="fingers-result" style="font-size: 36px; color: green;">0</div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.4/p5.min.js"></script>
<script src="https://unpkg.com/ml5@1/dist/ml5.min.js"></script>

<script>
(function() {
  let handPose;
  let video;
  let hands = [];
  let currentSum;
  let sumCorrect = false;

  const sketch = (p) => {

    p.preload = function() {
      // Load the handPose model
      handPose = ml5.handPose();
    };

    p.setup = function() {
      // Create a canvas and attach it to the 'canvas-container'
      p.createCanvas(640, 480).parent('canvas-container');
      currentSum = generateRandomSum();
      // Create the webcam video and hide it
      video = p.createCapture(p.VIDEO);
      video.size(640, 480);
      video.hide();
      // Start detecting hands from the webcam video
      handPose.detectStart(video, gotHands);
    };

    p.draw = function() {
      // Draw the webcam video
      p.image(video, 0, 0, p.width, p.height);

      // Draw all the tracked hand points
      for (let i = 0; i < hands.length; i++) {
        let hand = hands[i];
        for (let j = 0; j < hand.keypoints.length; j++) {
          let keypoint = hand.keypoints[j];
          p.fill(0, 255, 0);
          p.noStroke();
          p.circle(keypoint.x, keypoint.y, 10);
        }
      }
    };

    function generateRandomSum() {
      const num1 = Math.floor(Math.random() * 6); 
      const num2 = Math.floor(Math.random() * 6); 
      const sum = num1 + num2;
      document.getElementById('random-sum').innerText = `${num1} + ${num2}`;
      return sum;
    }


    // Callback function for when handPose outputs data
    function gotHands(results) {

      hands = results;
      console.log(hands);
  
      if(hands[0] != undefined) {
        let middle = verifyStretchedFinger(hands[0], 2);
        let index = verifyStretchedFinger(hands[0], 1);
        let thumb = verifyStretchedFinger(hands[0], 0);
        let ring = verifyStretchedFinger(hands[0], 3);
        let pinky = verifyStretchedFinger(hands[0], 4);
        
            
        let fingers = [middle, index, thumb, ring, pinky];
        
        fingersRaised(fingers)
      }
  
      if (hands[0] != undefined && hands[1] != undefined) {
        let middle = verifyStretchedFinger(hands[0], 2);
        let index = verifyStretchedFinger(hands[0], 1);
        let thumb = verifyStretchedFinger(hands[0], 0);
        let ring = verifyStretchedFinger(hands[0], 3);
        let pinky = verifyStretchedFinger(hands[0], 4);
        let middleR = verifyStretchedFinger(hands[1], 2);
        let indexR = verifyStretchedFinger(hands[1], 1);
        let thumbR = verifyStretchedFinger(hands[1], 0);
        let ringR = verifyStretchedFinger(hands[1], 3);
        let pinkyR = verifyStretchedFinger(hands[1], 4);
        
        let fingers = [middle, index, thumb, ring, pinky, middleR, indexR, thumbR, ringR, pinkyR];
        
        fingersRaised(fingers)
      }
  
      if (hands[1] != undefined) {
        let middleR = verifyStretchedFinger(hands[1], 2);
        let indexR = verifyStretchedFinger(hands[1], 1);
        let thumbR = verifyStretchedFinger(hands[1], 0);
        let ringR = verifyStretchedFinger(hands[1], 3);
        let pinkyR = verifyStretchedFinger(hands[1], 4);

        let fingers = [middleR, indexR, thumbR, ringR, pinkyR];
      }
  
    }

    function verifyStretchedFinger(hand, index) {
      switch (index) {
        case 0:
          if (calculateDistance(hand.thumb_cmc, hand.thumb_tip) < 100) return false;
          return true;
        case 1:
          if (hand.index_finger_pip.y - hand.index_finger_tip.y < 1) return false;
          return true;
        case 2:
          if (hand.middle_finger_pip.y - hand.middle_finger_tip.y < 1) return false;
          return true;
        case 3:
          if (hand.ring_finger_pip.y - hand.ring_finger_tip.y < 1) return false;
          return true;
        case 4:
          if (hand.pinky_finger_pip.y - hand.pinky_finger_tip.y < 1) return false;
          return true;
      }
    }

    let recordingTimeout; // Variable to hold the timeout

    function fingersRaised(fingers) {
        // Clear the previous timeout if it exists
        clearTimeout(recordingTimeout);

        // Set a new timeout to record fingers raised after 1000 ms (1 second)
        recordingTimeout = setTimeout(() => {
            let fingersRaised = 0;
            for (let i = 0; i < fingers.length; i++) {
                if (fingers[i]) {
                    fingersRaised++;
                }
            }
            document.getElementById('fingers-result').innerText = fingersRaised;

            if (fingersRaised === currentSum && !sumCorrect) {
                sumCorrect = true;

                document.getElementById('result-box').style.borderColor = 'green';
                document.getElementById('result-box').style.backgroundColor = 'lightgreen';

                setTimeout(() => {
                    document.getElementById('result-box').style.borderColor = '#000';
                    document.getElementById('result-box').style.backgroundColor = '#fff';
                    currentSum = generateRandomSum();
                    document.getElementById('fingers-result').innerText = 0; 
                    sumCorrect = false; 
                }, 2000);
            } else {
                document.getElementById('fingers-result').innerText = fingersRaised;
            }
        }, 1250); // Adjust this delay as needed
    }

    function calculateDistance(p1, p2) {
      return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
    }
  };

  new p5(sketch);
})();
</script>
